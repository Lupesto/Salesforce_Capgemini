no xamp, ligar Apache e MySQL
http://localhost/phpmyadmin/


Criando getters/setters, construtor e o toString
https://prnt.sc/SuUw7A2EtflL


Guia > Base de dados
https://prnt.sc/_kMTheoZRR4Y


Criando tabela
https://prnt.sc/cecFt5XnXsCl
+1 campo pois precisamos do ID

Criando os campos
https://prnt.sc/LByJWWrWqp7h
Tudo foi elaborado previamente lá na documentação do projeto
Auto incrementado (não precisamos nos preocupar com ID)
Nulo quando marcado permite que o campo seja vazio


Criando tabela tasks
Id projects necessário para fazer conexão
https://prnt.sc/tFrcaEh3p814

Chave estrangeira 
https://prnt.sc/RFQvMi1-xeAu

Criando pacotes, 
uso do alt+insert, atalho da IDE.
https://prnt.sc/REQIe14wpw5Q




PAREI AULA 10.b

Criando nova classe java

Classes e atributos
https://prnt.sc/kTHA1__kPkND


Gerar construtor, getters e setters e toString
https://prnt.sc/fki5SFzOAAOo



10.c



criar pacote chamado util
https://prnt.sc/nB47YCEz1nrp

dentro uma classe chamada ConnectionFactory
Criando classe para conectar aos bancos de dados
por padrão root e sem senha. porta está no xamp.
driver, url e user/pass
https://prnt.sc/IQHeK0WUTOD7




Java dependences, conjunto de bibliotecas que iniciam com o java
jdbc não vem 
dizer ao java que precisamos dessa lib. 
ir em build script > buildgraddle > dependencies
Lá colamos um código que há no site com diversas dependências do java. 
https://prnt.sc/GGzCTD-bRJNo
https://prnt.sc/GB1zzHFkzLr8

--
parei em 10.d

metodo para iniciar a conexão com banco de dados e fechar
uso do static permite que você chame o método sem instancia (não precisa criar o objeto para chamar o método), só chamar a classe.método
nome da classe e o método que vamos utilizar.
DriverManager é uma classe da dependência que baixamos
+ tratamento de exceção caso haja erro.
https://prnt.sc/MeYCRk5RCI6s


---
10.e
explicação sobre tratamento de exceção.
Caso ocorra um erro o programa fará outra operação.

--

Abertura e fechamento de conexão com banco de dados

-- 
11 trabalhando nos controladores

[anotar etapas do desenvolvimento]
método para as operações


formas de setar valores
o tipo data esperado do sql não é o mesmo do java util
importar o date do sql




----
11.l
teste input, delete e update de projeto no banco de dados

---
[anotar passo a passo das intruções]
12.a
mainScreen 
criando elementos visuais
preview design
adicionando icone como logo + pasta resources

12.b
colocando borda
separando espaços para os paineis do mainScreen
adicionando icone + como label

12.c
elemento list, adicionar na parte de projetos
adicionar painel com imagem informando que nenhum projeto foi selecionado
limitar a redução da janela por parte do usuário

12.d
arrumando itens da lista (estilização, e select mode)

12.e
Espaçamento entre os itens da lista
é possível visualizar cada painel individualmente
nomeando elementos do jFrame no navigator


12.f

---

12.D, prints


12j ->
ir em source do main frame
 expandir o método main
substituir template para java.swing para fazer mudanças no grid

criando método para mudar fonte, background,

import do awt no java.
sorter -> permitir icone para ordenar em ordem alfabetica

chamar o método em main screen

---

13.a

cadastro de projeto.
adicionando evento quando elemento for cliccado
ativar o dialog assim que tela clicada

dê nomes aos componentes gráficos para não se perder.

pegando texto dentro dos componentes gráfico ao invés de setar informações pelo codigo 

caixa de diálogo assim que o usuário salvar o projeto

--

13.b
tratando exceção. 
Colocando todo todo código dentro de try e retornar a exceção caso dê erro.



---

14.a

adicionando um campo formatado para trabalharmos com data

this.dispose(); serve para fechar janela

---

14.b

evento para salvar tarefa
ligando tarefa a chave estrangeira 
criando um setter de project para dizer ao programa qual projeto a tarefa pertence

-- 
14.c

id no projeto na unha para testar tela de tarefa

salvando tarefa bi vabci de dados

--

15.a

tela principal da aplicação
carregando as tarefas e projetos

iniciando os métodos controladores

componente grafico e models.

--
15.b 

carregar dados em nossa lista
vindos do banco de dados
[confuso


--
15.c

problema ao adicionar projetos pois é um objeto e o componente pede string.


--

15.d

assim que criar um novo projeto quer que apareça na lista de projetos


evento de click adicionar 
quando janela for fechada
carregue/atualize projetos


--

16.a
fazendo via código
maior liberdade de customização

herdar da abstractTable Model

a classe mãe exige import de alguns métodos
implementar todos métodos abstratos da classe
(não entra em detalhes por ser um assunto mais complexo)


adicionando colunas que vão aparecer na table e lista de tarefas
quais colunas e dados teremos
--
16.b
getRowCount-> quantas linhas teremos na tabela
getColumnCount -> quantas colunas
getValueAt -> método para retornar linha e coluna especifica
Uso do switch para retornar coluna e linha com base linha e coluna
--

16.c
definindo quais dados teremos no grid


-- 
16.d

carregar todas as tarefas de um projeto especifico na tabela


getters - colunas
setters - tarefas
--

[dividir tudo em pequenos programas para desenvolver]

--
16.e

conferindo erros
criando o getColumnName -> que não é obrigatório, mas precisamos no caso

em getValueAt o switch deve começar com 0 por conta do vetor

-- 
16.f

desabilitar a posibilidade do usuário selecionar várias linhas com alt.

Alteração do formato data para a nossa.
--

16.g
colocando check na tabela

método para tornar a célula da tabela editável, por padrão a classe pai vem travada
Especificar uma coluna 
Permite edições, mas não atualiza no banco de daddos


--
16.h

@override <- sobreescrever um método

identificando tipo de dado por parte da interface gráfica
mudar o componente gráfico com base no tipo de informação contida nele.
ex: surgimento do check para boleano

--
16.i
CONVERSÃO DE TIPOS
conversão de um object para bolean
(não entendi o motivo de não ter colocado o bolean direto)
Permitiu que o campo altere seu valor para true ou false conforme interesse usuário

Porém não salva no banco de dados a mudança


--

17.a
Salvando status da tarefa no banco de dados

Método para identificar em que ponto da tabela houve o click

uso do swtich, caso clicar na coluna 3:
salvar tarefa no banco de dados

--
17.b 
continuação aula A

acessar tarefa no taskModel com base na linha que foi clicada
mudança para o método update do taskcontroller

[rever aula <- não entendi ]



--

17.c
carregar tarefas conforme projeto selecionado

método para retornar lista tarefas do projeto clicado

converter um objeto para a classse projeto

--
17.d
continuação aula 17.c

método showJTableTasks
recebe como parâmetro tarefas carregadas
remove a mensagem de lista vazia na tela

Se houver tarefas colocar outro tipo de componente gráfico dentro do JPanel vazil

se tiver tarefas exibir -> lista de tarefas no container 
se não -> tela informando que está vazio

loadTasks
método para identificar se lista está vazia


--
17.e

resolvendo problema:
mesmo não selecionando nenhum projeto o programa apresenta algumas tarefas

forçar seleção do primeiro item da lista de projetos

NÃO DÁ PARA ACOMPANHAR, EDIÇÃO DO VÍDEO ERRADA

--
17.F


na hora de salvar dizer para qual projeto a tarefa pertence

--
17.g

atualizar lista de tarefas assim que a tela de adicionar tarefa for fechada.

adicionar um listener 
Quando janela for fechada atualizar tarefas


-- 
17.h

ajuste ao autoresing 
fazer com que o componente interno do jPanel respeite o size do container
--

17.i 
função de remover tarefas de um projeto pela interface

caso clique na coluna 5 excluir tarefa 

remover tratamento de erro SQLException (não aprofundou)

além de remover tarefa recarregar página

--
18.a
melhorias de interface

coluna de prazo em vermelho caso prazo estiver estourado

mudança no renderizador padrão no JAVA do Jframe

sobreescrevendo um método da classe
centralizando data na célula

--

18.b
colorindo a célula conforme prazo da tarefa
se data do prazo > data atual pintar em vermelho
--

18.c
colocando na mainScreen que devemos utilizar o método criado anteriormente de customização

mudança de ordem de funções no mainScreen.

--
18.d

criando classe para botão na jTable editar e excluir
setando icone na label
método que acessa pasta resources 

--
18.e

Permitir que colunas mostrem os botões
criando construtor para informar o botão que queremos renderizar
--
19.a

Validações de campos
Acessando banco de dados e confirmando campos que podem ser nulos.

acessando componente responsável por salvar projeto.

permitir o cadastro do campo se valor não for vazio

--
19.b


